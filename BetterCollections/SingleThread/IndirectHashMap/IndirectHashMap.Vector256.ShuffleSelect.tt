<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#
    byte[] items = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
#>
// <auto-generated/>

#if NET7_0_OR_GREATER
using System;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.Intrinsics;
using BetterCollections.Misc;

namespace BetterCollections;

public partial class IndirectHashMap<TKey, TValue>
{
    private static partial class Vector256Impl
    {
        #region Shuffle / Select By Offset

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Vector256<byte> ShuffleByOffset(Vector256<byte> group, int offset) => offset switch
        {
<#
    void WriteItems(int l)
    {
        var first = true;
        for (var i = 0; i < 32; i++)
        {
            if (first) first = false;
            else Write(", ");
            Write($"{(i + l) % 32}");
        }
    }

    for (var l = 1; l < 32; l++)
    {
#>
            <#= l #> => Vector256.Shuffle(group, Vector256.Create((byte)<#
        WriteItems(l);
#>)),
<#
    }
#>
            _ => Vector256.Shuffle(group, Vector256.Create((byte)<#
    WriteItems(0);
#>)),
        };

        #endregion
    }
}

#endif
